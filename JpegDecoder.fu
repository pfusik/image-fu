class JpegHuffmanTable
{
	internal byte[16] NBitCodeCount;
	internal byte[256] Symbols;
}

/// Decoder of the JPEG bitmap format.
public class JpegDecoder : ImageDecoder
{
	public JpegDecoder()
	{
	}

	int Components;
	int ColorSamplingH;
	int ColorSamplingV;

	ushort ReadWord!() throws ImageFormatException
	{
		int hi = ReadByte();
		int lo = ReadByte();
		return (hi << 8) | lo;
	}

	void ReadBytes!(byte[]! result, int length) throws ImageFormatException
	{
		for (int i = 0; i < length; i++)
			result[i] = ReadByte();
	}

	int Bits;

	0 .. 1 ReadBit!() throws ImageFormatException
	{
		if ((Bits & 0x7f) == 0) {
			int value = ReadByte();
			if (value == 0xff && ReadByte() != 0)
				throw ImageFormatException("Expected FF 00");
			Bits = value << 1 | 1;
		}
		else
			Bits <<= 1;
		return Bits >> 8 & 1;
	}

	short ReadSignedBits!(int n) throws ImageFormatException
	{
		if (n == 0)
			return 0;
		int result = ReadBit();
		if (result == 0)
			result = -2;
		while (--n > 0)
			result = result << 1 | ReadBit();
		if (result < 0)
			result++;
		return result;
	}
	

	byte ReadCode!(JpegHuffmanTable table) throws ImageFormatException
	{
		int offset = 0;
		int code = 0;
		for (int bits = 1; bits <= 16; bits++) {
			code += ReadBit();
			int n = table.NBitCodeCount[bits - 1];
			if (code < n)
				return table.Symbols[offset + code];
			offset += n;
			code = code - n << 1;
		}
		throw ImageFormatException("Unassigned code");
	}

	short ReadBlock!(JpegHuffmanTable dcTable, JpegHuffmanTable acTable, int lastCoefficient) throws ImageFormatException
	{
		int code = ReadCode(dcTable);
		if (code > 11)
			throw ImageFormatException("Invalid DC code");
		short dcDelta = ReadSignedBits(code);
		for (int i = 1; i <= lastCoefficient; i++) {
			code = ReadCode(acTable);
			if (code == 0)
				break;
			i += code >> 4;
			if (i > lastCoefficient)
				throw ImageFormatException("Invalid AC code");
			ReadSignedBits(code & 0xf);
		}
		return dcDelta;
	}

	int GetColorWidth() => (Width + ColorSamplingH - 1) / ColorSamplingH;

	int GetColorHeight() => (Height + ColorSamplingV - 1) / ColorSamplingV;

	protected override void DoDecode!() throws ImageFormatException
	{
		if (ReadByte() != 0xff || ReadByte() != 0xd8)
			throw ImageFormatException("Not a JPEG");
		Components = 0;
		byte[4][64] quantizationTables;
		byte[3][] componentQuantizationTables;
		JpegHuffmanTable()[4] dcHuffmanTables;
		JpegHuffmanTable()[4] acHuffmanTables;
		JpegHuffmanTable[3] componentDcHuffmanTables;
		JpegHuffmanTable[3] componentAcHuffmanTables;
		int restartInterval = 0;
		while (ReadByte() == 0xff) {
			int code = ReadByte();
			int length = ReadWord();
			if (length < 2)
				throw ImageFormatException("Invalid segment length");
			switch (code) {

			case 0xc0: // Baseline DCT
			case 0xc1: // Extended sequential DCT
			case 0xc2: // Progressive DCT
				if (ReadByte() != 8)
					throw ImageFormatException("Only 8-bit depth supported");
				Height = ReadWord() + 7 >> 3; // TODO: DC only for now
				Width = ReadWord() + 7 >> 3;
				Components = ReadByte();
				if (Components != 1 && Components != 3)
					throw ImageFormatException("Expected 1 or 3 components");
				if (length != 2 + 1 + 2 + 2 + 1 + Components * 3)
					throw ImageFormatException("Invalid segment length");
				for (int i = 0; i < Components; i++) {
					ReadByte(); // if (ReadByte() != 1 + i) throw "Invalid component";
					int samplingFactor = ReadByte();
					if (i == 0) {
						ColorSamplingH = samplingFactor >> 4;
						if (ColorSamplingH == 0 || ColorSamplingH > 4)
							throw ImageFormatException("Invalid sampling factor");
						ColorSamplingV = samplingFactor & 0xf;
						if (ColorSamplingV == 0 || ColorSamplingV > 4)
							throw ImageFormatException("Invalid sampling factor");
					}
					else if (samplingFactor != 0x11)
						throw ImageFormatException("Invalid sampling factor");
					int quantizationId = ReadByte();
					if (quantizationId > 3)
						throw ImageFormatException("Invalid quantization table");
					componentQuantizationTables[i] = quantizationTables[quantizationId];
				}
				break;

			case 0xc4: // Define Huffman Tables
				while (length >= 2 + 1 + 16) {
					int id = ReadByte();
					JpegHuffmanTable! huffmanTable;
					if (id < 4)
						huffmanTable = dcHuffmanTables[id];
					else if ((id & 0xec) == 0)
						huffmanTable = acHuffmanTables[id & 3];
					else
						throw ImageFormatException("Invalid DHT");
					int symbolCount = 0;
					for (int i = 0; i < 16; i++)
						symbolCount += huffmanTable.NBitCodeCount[i] = ReadByte();
					if (symbolCount > 256)
						throw ImageFormatException("Invalid DHT");
					ReadBytes(huffmanTable.Symbols, symbolCount);
					length -= 1 + 16 + symbolCount;
				}
				if (length != 2)
					throw ImageFormatException("Invalid DHT");
				break;

			case 0xdb: // Define Quantization Tables
				for (; length >= 2 + 1 + 64; length -= 1 + 64) {
					int id = ReadByte();
					if (id > 3)
						throw ImageFormatException("Invalid DQT");
					ReadBytes(quantizationTables[id], 64);
				}
				if (length != 2)
					throw ImageFormatException("Invalid DQT");
				break;

			case 0xdd: // Define Restart Interval
				if (length != 4)
					throw ImageFormatException("Invalid DRI");
				restartInterval = ReadWord();
				break;

			case 0xda: // Start Of Scan
				if (ReadByte() != Components)
					throw ImageFormatException("Invalid components (non-interleaved?)");
				if (length != 2 + 1 + Components * 2 + 3)
					throw ImageFormatException("Invalid segment length");
				for (int i = 0; i < Components; i++) {
					ReadByte(); // if (ReadByte() != 1 + i) throw "Invalid component";
					int huffmanIds = ReadByte();
					if ((huffmanIds & 0xcc) != 0)
						throw ImageFormatException("Invalid Huffman table");
					componentDcHuffmanTables[i] = dcHuffmanTables[huffmanIds >> 4];
					componentAcHuffmanTables[i] = acHuffmanTables[huffmanIds & 3];
				}
				if (ReadByte() != 0)
					throw ImageFormatException("Invalid SOS");
				int lastCoefficient = ReadByte();
				if (lastCoefficient > 63)
					throw ImageFormatException("Invalid SOS");
				int bitPosition = ReadByte();
				if (bitPosition > 1) // TODO?
					throw ImageFormatException("Invalid SOS");

				Bits = 0;
				int yLength = Height * Width;
				int colorLength = Components == 3 ? GetColorHeight() * GetColorWidth() : 0;
				Pixels = new byte[yLength + (colorLength << 1)];
				int restartIntervalCounter = restartInterval + 1;
				int restartMarker = 0;
				int[3] dcs = 0;
				for (int y = 0; y < Height; y += ColorSamplingV) {
					for (int x = 0; x < Width; x += ColorSamplingH) {
						if (restartInterval > 0) {
							if (--restartIntervalCounter == 0) {
								restartIntervalCounter = restartInterval;
								if (ReadByte() != 0xff || ReadByte() != 0xd0 + restartMarker)
									throw ImageFormatException("Expected Restart Marker");
								restartMarker = restartMarker + 1 & 7;
								Bits = 0;
								dcs.Fill(0);
							}
						}
						for (int v = 0; v < ColorSamplingV; v++) {
							for (int h = 0; h < ColorSamplingH; h++) {
								dcs[0] += ReadBlock(componentDcHuffmanTables[0], componentAcHuffmanTables[0], lastCoefficient) * componentQuantizationTables[0][0];
								if (x + h < Width && y + v < Height)
									Pixels[(y + v) * Width + x + h] = 128 + (dcs[0] >> 3 - bitPosition);
							}
						}
						if (Components == 3) {
							dcs[1] += ReadBlock(componentDcHuffmanTables[1], componentAcHuffmanTables[1], lastCoefficient) * componentQuantizationTables[1][0];
							dcs[2] += ReadBlock(componentDcHuffmanTables[2], componentAcHuffmanTables[2], lastCoefficient) * componentQuantizationTables[2][0];
							int offset = yLength + y / ColorSamplingV * GetColorWidth() + x / ColorSamplingH;
							Pixels[offset] = 128 + (dcs[1] >> 3 - bitPosition);
							Pixels[offset + colorLength] = 128 + (dcs[2] >> 3 - bitPosition);
						}
					}
				}
				return;

			default: // ignore
				SkipBytes(length - 2);
				break;
			}
		}
		throw ImageFormatException("Not a JPEG");
	}

	static int Clamp(int b) => b < 0 ? 0 : b > 255 ? 255 : b;

	public override int GetPixel(int x, int y)
	{
		int cY = Pixels[y * Width + x];
		if (Components != 3)
			return 0xff << 24 | cY * 0x010101;

		int colorWidth = GetColorWidth();
		int offset = Height * Width + y / ColorSamplingV * colorWidth + x / ColorSamplingH;
		int cB = Pixels[offset] - 128;
		int cR = Pixels[offset + GetColorHeight() * colorWidth] - 128;
		int r = cY + cR * 1402 / 1000;
		int b = cY + cB * 1772 / 1000;
		int g = (cY * 1000 - r * 299 - b * 114) / 587;
		return 0xff << 24 | Clamp(r) << 16 | Clamp(g) << 8 | Clamp(b);
	}
}

/// Decoder of the PNG bitmap format.
public class PngDecoder : ImageDecoder
{
	public PngDecoder()
	{
	}

	int ReadLong!() throws
	{
		int result = ReadByte() << 24;
		result |= ReadByte() << 16;
		result |= ReadByte() << 8;
		result |= ReadByte();
		return result;
	}

	static int ToChunkType(string s) => s[0] << 24 | s[1] << 16 | s[2] << 8 | s[3];

	int ChunkRemaining;

	int ReadIdatByte!() throws
	{
		while (--ChunkRemaining < 0) {
			ReadLong(); // CRC
			ChunkRemaining = ReadLong();
			if (ReadLong() != ToChunkType("IDAT"))
				throw "Invalid chunk";
		}
		return ReadByte();
	}

	int Bits;

	int ReadBit!() throws
	{
		if (Bits <= 1) {
			Bits = ReadIdatByte() | 0x100;
		}
		int result = Bits & 1;
		Bits >>= 1;
		return result;
	}

	int ReadBits!(int count) throws
	{
		int result = 0;
		for (int rank = 0; rank < count; rank++) {
			if (ReadBit() != 0)
				result |= 1 << rank;
		}
		return result;
	}

	const int PrimarySymbols = 256 + 1 + 29 + 2;
	const int DistanceSymbols = 30;
	const int AllSymbols = PrimarySymbols + DistanceSymbols;
	byte[AllSymbols] SymbolCodeLength;

	const int TreeSize = 16;
	const int PrimaryTree = 0;
	const int DistanceTree = TreeSize;
	int[2 * TreeSize] NBitCodeCount;
	int[2 * TreeSize] NBitCodeOffset;
	short[AllSymbols] CodeToSymbol;

	void BuildHuffmanTrees!()
	{
		NBitCodeCount.Fill(0);
		for (int i = 0; i < AllSymbols; i++)
			NBitCodeCount[SymbolCodeLength[i]]++;
		int offset = 0;
		for (int i = 0; i < 2 * TreeSize; i++) {
			NBitCodeOffset[i] = offset;
			offset += NBitCodeCount[i];
		}
		for (int i = 0; i < AllSymbols; i++)
			CodeToSymbol[NBitCodeOffset[SymbolCodeLength[i]]++] = i;
	}

	int FetchCode!(int tree) throws
	{
		int code = 0;
		do {
			int bit = ReadBit();
			code = (code << 1) + bit - NBitCodeCount[++tree];
			if (code < 0)
				return CodeToSymbol[NBitCodeOffset[tree] + code];
		} while ((tree & 0xf) != 0xf);
		throw "Decompression error";
	}

	void Inflate!(byte[]! unpacked, int unpackedLength) throws
	{
		int unpackedOffset = 0;
		Bits = 0;

		int lastBlock;
		do {
			lastBlock = ReadBit();
			int count;
			switch (ReadBits(2)) {
			case 0:
				Bits = 0;
				count = ReadBits(16);
				if (unpackedOffset + count > unpackedLength
				 || ReadBits(16) != (count ^ 0xffff))
					throw "Decompression error";
				while (--count >= 0)
					unpacked[unpackedOffset++] = ReadIdatByte();
				continue;

			case 1:
				for (int i = 0; i < 144; i++)
					SymbolCodeLength[i] = 8;
				for (int i = 144; i < 256; i++)
					SymbolCodeLength[i] = 9;
				for (int i = 256; i < 280; i++)
					SymbolCodeLength[i] = 7;
				for (int i = 280; i < 288; i++)
					SymbolCodeLength[i] = 8;
				for (int i = 288; i < 288 + DistanceSymbols; i++)
					SymbolCodeLength[i] = DistanceTree + 5;
				break;

			case 2:
				int primaryCodes = 257 + ReadBits(5);
				int codes = PrimarySymbols + 1 + ReadBits(5);
				if (codes > AllSymbols)
					throw "Decompression error";
				int temporaryCodes = ReadBits(4);
				if (temporaryCodes < 0)
					throw "Decompression error";
				temporaryCodes += 4;
				SymbolCodeLength.Fill(0);
				for (int i = 0; i < temporaryCodes; i++) {
					int bits = ReadBits(3);
					const byte[] tempSymbols = { 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 };
					SymbolCodeLength[tempSymbols[i]] = bits;
				}
				BuildHuffmanTrees();
				int length = 0;
				count = 1;
				for (int i = 0; i < codes; i++) {
					if (--count == 0) {
						int symbol = FetchCode(PrimaryTree);
						switch (symbol) {
						case 16:
							count = ReadBits(2) + 3;
							break;
						case 17:
							length = 0;
							count = ReadBits(3) + 3;
							break;
						case 18:
							length = 0;
							count = ReadBits(7) + 11;
							break;
						default:
							length = symbol;
							count = 1;
							break;
						}
					}
					if (i == primaryCodes)
						i = PrimarySymbols;
					SymbolCodeLength[i] = i < PrimarySymbols ? length : DistanceTree + length;
				}
				break;

			default:
				throw "Decompression error";
			}

			BuildHuffmanTrees();
			for (;;) {
				int symbol = FetchCode(PrimaryTree);
				if (symbol == 256)
					break;
				if (unpackedOffset >= unpackedLength)
					throw "Decompression error";
				if (symbol < 256)
					unpacked[unpackedOffset++] = symbol;
				else {
					switch (symbol) {
					case 257:
					case 258:
					case 259:
					case 260:
					case 261:
					case 262:
					case 263:
					case 264:
						count = symbol - 254;
						break;
					case 285:
						count = 258;
						break;
					case 286:
					case 287:
						throw "Decompression error";
					default:
						symbol -= 261;
						count = ReadBits(symbol >> 2);
						count += (4 + (symbol & 3) << (symbol >> 2)) + 3;
						break;
					}

					symbol = FetchCode(DistanceTree);
					int distance;
					switch (symbol) {
					case PrimarySymbols:
					case PrimarySymbols + 1:
					case PrimarySymbols + 2:
					case PrimarySymbols + 3:
						distance = symbol - (PrimarySymbols - 1);
						break;
					default:
						symbol -= PrimarySymbols + 2;
						distance = ReadBits(symbol >> 1);
						distance += (2 + (symbol & 1) << (symbol >> 1)) + 1;
						break;
					}

					if (unpackedOffset + count > unpackedLength
					 || distance > unpackedOffset)
						throw "Decompression error";
					do {
						unpacked[unpackedOffset] = unpacked[unpackedOffset - distance];
						unpackedOffset++;
					} while (--count > 0);
				}
			}
		} while (lastBlock == 0);
		if (unpackedOffset != unpackedLength)
			throw "Decompression error";
	}

	void Uncompress!(byte[]! unpacked, int unpackedLength) throws
	{
		// bits 0 to 3: Compression method (must be Z_DEFLATED)
		// bits 4 to 7: Compression info (must be <= 7)
		int b0 = ReadIdatByte();
		if ((b0 & 0x8f) != 8)
			throw "Decompression error";

		// bits 0 to 4: Check bits
		// bit 5:       Preset dictionary (not supported)
		// bits 6 to 7: Compression level
		int b1 = ReadIdatByte();
		if ((b1 & 0x20) != 0 || (b0 << 8 | b1) % 31 != 0)
			throw "Decompression error";

		Inflate(unpacked, unpackedLength);
	}

	int Type;
	int Depth;

	int GetBitsPerPixel()
	{
		const byte[7] channels = { 1, 0, 3, 1, 2, 0, 4 };
		return channels[Type] * Depth;
	}

	int GetAdam7Stride(int pass)
		=> (Width + (7 >> (pass >> 1)) >> (8 - pass >> 1)) * GetBitsPerPixel() + 7 >> 3;

	int GetAdam7Height(int pass)
		=> Height + (7 >> (pass - 1 >> 1)) >> (pass == 1 ? 3 : 9 - pass >> 1);

	void Filter!(int dest, int src, int bytesPerLine, int height) throws
	{
		int bitsPerPixel = GetBitsPerPixel();
		int bytesPerPixel = bitsPerPixel <= 8 ? 1 : bitsPerPixel >> 3;
		for (int y = 0; y < height; y++) {
			int filter = Pixels[src++];
			for (int x = 0; x < bytesPerLine; x++) {
				int value = Pixels[src];
				switch (filter) {
				case 0:
					break;
				case 1:
					if (x >= bytesPerPixel)
						value += Pixels[dest - bytesPerPixel];
					break;
				case 2:
					if (y > 0)
						value += Pixels[dest - bytesPerLine];
					break;
				case 3:
					int sum = x >= bytesPerPixel ? Pixels[dest - bytesPerPixel] : 0;
					if (y > 0)
						sum += Pixels[dest - bytesPerLine];
					value += sum >> 1;
					break;
				case 4:
					byte a = x >= bytesPerPixel ? Pixels[dest - bytesPerPixel] : 0;
					byte b = y > 0 ? Pixels[dest - bytesPerLine] : 0;
					byte c = x >= bytesPerPixel && y > 0? Pixels[dest - bytesPerPixel - bytesPerLine] : 0;
					int pa = Math.Abs(b - c);
					int pb = Math.Abs(a - c);
					int pc = Math.Abs(a + b - (c << 1));
					value += pa <= pb && pa <= pc ? a : pb <= pc ? b : c;
					break;
				default:
					throw "Invalid filter";
				}
				src++;
				Pixels[dest++] = value & 0xff;
			}
		}
	}

	bool Interlace;
	int[8] Adam7PassOffset;
	int TransparentColor;
	int TransparentColorHi;

	protected override void DoDecode!() throws
	{
		if (ReadByte() != 0x89
		 || ReadByte() != 'P'
		 || ReadByte() != 'N'
		 || ReadByte() != 'G'
		 || ReadByte() != 0x0d
		 || ReadByte() != 0x0a
		 || ReadByte() != 0x1a
		 || ReadByte() != 0x0a)
			throw "Not a PNG";

		Type = -1;
		for (;;) {
			int chunkLength = ReadLong();
			int chunkType = ReadLong();
			switch (chunkType) {
			case ToChunkType("IHDR"):
				if (Type >= 0 || chunkLength != 13)
					throw "Invalid header";
				Width = ReadLong();
				Height = ReadLong();
				if (Width <= 0 || Height <= 0)
					throw "Invalid header";
				Depth = ReadByte();
				if (Depth > 16)
					throw "Invalid header";
				Type = ReadByte(); // color type 1=palette, 2=color, 4=alpha
				if (Type > 6)
					throw "Invalid header";
				const int[7] validDepths = {
					0x10116, // 0: grayscale: 1, 2, 4, 8, 16
					0x00000, // 1: invalid
					0x10100, // 2: RGB: 8, 16
					0x00116, // 3: indexed: 1, 2, 4, 8
					0x10100, // 4: grayscale+alpha: 8, 16
					0x00000, // 5: invalid
					0x10100  // 6: RGBA: 8,16
				};
				if ((validDepths[Type] & 1 << Depth) == 0)
					throw "Invalid header";
				if (ReadByte() != 0)
					throw "Invalid compression";
				if (ReadByte() != 0)
					throw "Invalid filter";
				switch (ReadByte()) {
				case 0:
					Interlace = false;
					break;
				case 1:
					Interlace = true;
					break;
				default:
					throw "Invalid interlace";
				}
				TransparentColor = -1;
				break;

			case ToChunkType("PLTE"):
				if (chunkLength % 3 != 0 || chunkLength > 256 * 3)
					throw "Invalid palette";
				ReadRgbPalette(chunkLength / 3);
				break;

			case ToChunkType("tRNS"):
				switch (Type) {
				case 0: // grayscale
					if (chunkLength != 2)
						throw "Invalid transparency";
					int hi = ReadByte();
					TransparentColor = hi << 8 | ReadByte();
					break;
				case 2: // RGB
					if (chunkLength != 6)
						throw "Invalid transparency";
					TransparentColor = 0;
					TransparentColorHi = 0;
					for (int i = 0; i < 3; i++) {
						TransparentColorHi = TransparentColorHi << 8 | ReadByte();
						TransparentColor = TransparentColor << 8 | ReadByte();
					}
					break;
				case 3: // indexed
					if (chunkLength > 256)
						throw "Invalid transparency";
					for (int i = 0; i < chunkLength; i++)
						Palette[i] &= ReadByte() << 24 | 0xffffff;
					break;
				default:
					throw "Invalid transparency";
				}
				break;

			case ToChunkType("IDAT"):
				if (Type < 0)
					throw "Invalid header";
				ChunkRemaining = chunkLength;

				int bytesPerLine = 0; // initialized to satisfy csc and javac
				int uncompressedLength;
				if (Interlace) {
					uncompressedLength = 0;
					for (int pass = 1; pass <= 7; pass++) {
						bytesPerLine = GetAdam7Stride(pass);
						if (bytesPerLine > 0)
							uncompressedLength += GetAdam7Height(pass) * (1 + bytesPerLine);
					}
				}
				else {
					bytesPerLine = GetAdam7Stride(7);
					uncompressedLength = Height * (1 + bytesPerLine);
				}

				Pixels = new byte[uncompressedLength];
				Uncompress(Pixels, uncompressedLength);

				if (Interlace) {
					int src = 0;
					int dest = 0;
					for (int pass = 1; pass <= 7; pass++) {
						bytesPerLine = GetAdam7Stride(pass);
						if (bytesPerLine > 0) {
							Adam7PassOffset[pass] = dest;
							int height = GetAdam7Height(pass);
							Filter(dest, src, bytesPerLine, height);
							src += height * (1 + bytesPerLine);
							dest += height * bytesPerLine;
						}
					}
				}
				else
					Filter(0, 0, bytesPerLine, Height);
				return;

			default:
				if ((chunkType & 1 << 29) == 0)
					throw "Unknown chunk";
				for (int i = 0; i < chunkLength; i++)
					ReadByte();
				break;
			}
			ReadLong(); // CRC
		}
	}

	public override int GetPixel(int x, int y)
	{
		int offset;
		if (Interlace) {
			int pass;
			switch (y & 7) {
			case 0:
				switch (x & 7) {
				case 0:
					pass = 1;
					x >>= 3;
					y >>= 3;
					break;
				case 4:
					pass = 2;
					x >>= 3;
					y >>= 3;
					break;
				case 2:
				case 6:
					pass = 4;
					x >>= 2;
					y >>= 2;
					break;
				default:
					pass = 6;
					x >>= 1;
					y >>= 1;
					break;
				}
				break;
			case 4:
				switch (x & 3) {
				case 0:
					pass = 3;
					x >>= 2;
					y >>= 3;
					break;
				case 2:
					pass = 4;
					x >>= 2;
					y >>= 2;
					break;
				default:
					pass = 6;
					x >>= 1;
					y >>= 1;
					break;
				}
				break;
			case 2:
			case 6:
				if ((x & 1) == 0) {
					pass = 5;
					y >>= 2;
				}
				else {
					pass = 6;
					y >>= 1;
				}
				x >>= 1;
				break;
			default:
				pass = 7;
				y >>= 1;
				break;
			}
			offset = Adam7PassOffset[pass] + y * GetAdam7Stride(pass);
		}
		else {
			offset = y * GetAdam7Stride(7);
		}

		int b;
		int rgb;
		int bytesPerComponent;

		switch (Type) {

		case 0: // grayscale
			switch (Depth) {
			case 1:
				b = Pixels[offset + (x >> 3)] >> (~x & 7) & 1;
				rgb = b * 0xffffff;
				break;
			case 2:
				b = Pixels[offset + (x >> 2)] >> ((~x & 3) << 1) & 3;
				rgb = b * 0x555555;
				break;
			case 4:
				b = Pixels[offset + (x >> 1)];
				b = (x & 1) == 0 ? b >> 4 : b & 15;
				rgb = b * 0x111111;
				break;
			case 8:
				b = Pixels[offset + x];
				rgb = b * 0x010101;
				break;
			case 16:
				offset += x << 1;
				b = Pixels[offset];
				rgb = b * 0x010101;
				b = b << 8 | Pixels[offset + 1];
				break;
			default:
				return 0;
			}
			if (b != TransparentColor)
				rgb |= 0xff << 24;
			return rgb;

		case 2: // RGB
			switch (Depth) {
			case 8:
				offset += x * 3;
				rgb = Pixels[offset] << 16 | Pixels[offset + 1] << 8 | Pixels[offset + 2];
				if (rgb != TransparentColor)
					rgb |= 0xff << 24;
				return rgb;
			case 16:
				offset += x * 6;
				rgb = Pixels[offset] << 16 | Pixels[offset + 2] << 8 | Pixels[offset + 4];
				if (rgb != TransparentColorHi
				 || (Pixels[offset + 1] << 16 | Pixels[offset + 3] << 8 | Pixels[offset + 5]) != TransparentColor)
					rgb |= 0xff << 24;
				return rgb;
			default:
				return 0;
			}

		case 3: // indexed
			switch (Depth) {
			case 1:
				b = Pixels[offset + (x >> 3)] >> (~x & 7) & 1;
				break;
			case 2:
				b = Pixels[offset + (x >> 2)] >> ((~x & 3) << 1) & 3;
				break;
			case 4:
				b = Pixels[offset + (x >> 1)];
				b = (x & 1) == 0 ? b >> 4 : b & 15;
				break;
			case 8:
				b = Pixels[offset + x];
				break;
			default:
				return 0;
			}
			return Palette[b];

		case 4: // grayscale+alpha
			bytesPerComponent = Depth >> 3;
			offset += x * (2 * bytesPerComponent);
			return Pixels[offset + bytesPerComponent] << 24
			     | Pixels[offset] * 0x010101;

		case 6: // RGBA
			bytesPerComponent = Depth >> 3;
			offset += x * (4 * bytesPerComponent);
			return Pixels[offset + 3 * bytesPerComponent] << 24
			     | Pixels[offset] << 16
			     | Pixels[offset + bytesPerComponent] << 8
			     | Pixels[offset + 2 * bytesPerComponent];

		default:
			return 0;
		}
	}
}

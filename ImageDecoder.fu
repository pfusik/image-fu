/// Exception thrown when image decoding fails.
public class ImageFormatException : Exception
{
}

/// Common part of the image decoders.
public abstract class ImageDecoder
{
	byte[] Input;
	int InputLength;
	int InputOffset;

	protected int Width;
	protected int Height;
	protected int[256] Palette;
	protected byte[]#? Pixels;

	protected byte ReadByte!() throws ImageFormatException
	{
		if (InputOffset >= InputLength)
			throw ImageFormatException("Unexpected EOF");
		return Input[InputOffset++];
	}

	protected void SkipBytes!(int length) throws ImageFormatException
	{
		while (--length >= 0)
			ReadByte();
	}

	protected void ReadRgbPalette!(int colors) throws ImageFormatException
	{
		for (int i = 0; i < colors; i++) {
			int r = ReadByte();
			int g = ReadByte();
			int b = ReadByte();
			Palette[i] = 0xff << 24 | r << 16 | g << 8 | b;
		}
	}

	protected abstract void DoDecode!() throws ImageFormatException;

	/// Decodes a bitmap stream passed as a byte array.
	public void Decode!(
		/// The content of the stream.
		byte[] input,
		/// The length of the stream.
		int inputLength)
		throws ImageFormatException
	{
		Pixels = null;
		Input = input;
		InputLength = inputLength;
		InputOffset = 0;
		DoDecode();
	}

	/// Returns image width.
	public int GetWidth() => Width;

	/// Returns image height.
	public int GetHeight() => Height;

	/// Returns pixel at the given position in the form 0xAARRGGBB.
	public abstract int GetPixel(int x, int y);
}

/// Decoder of the GIF bitmap format.
public class GifDecoder : ImageDecoder
{
	public GifDecoder()
	{
	}

	ushort ReadWord!() throws ImageFormatException
	{
		int lo = ReadByte();
		int hi = ReadByte();
		return lo | (hi << 8);
	}

	void ReadPalette!(int flags) throws ImageFormatException
	{
		if ((flags & 0x80) != 0)
			ReadRgbPalette(2 << (flags & 7));
	}

	int BlockBytes;

	byte ReadBlockByte!() throws ImageFormatException
	{
		if (BlockBytes == 0) {
			BlockBytes = ReadByte();
			if (BlockBytes == 0)
				throw ImageFormatException("Unexpected block terminator");
		}
		BlockBytes--;
		return ReadByte();
	}

	int BitBuffer;
	int BitBufferBits;

	ushort ReadCode!(int bits) throws ImageFormatException
	{
		while (BitBufferBits < bits) {
			BitBuffer |= ReadBlockByte() << BitBufferBits;
			BitBufferBits += 8;
		}
		int result = BitBuffer & (1 << bits) - 1;
		BitBuffer >>= bits;
		BitBufferBits -= bits;
		return result;
	}

	bool Interlace;

	protected override void DoDecode!() throws ImageFormatException
	{
		if (ReadByte() != 'G'
		 || ReadByte() != 'I'
		 || ReadByte() != 'F'
		 || ReadByte() != '8')
			throw ImageFormatException("Not a GIF");
		switch (ReadByte()) {
		case '7':
		case '9':
			break;
		default:
			throw ImageFormatException("Not a GIF");
		}
		if (ReadByte() != 'a')
			throw ImageFormatException("Not a GIF");
		ReadWord(); // screen width
		ReadWord(); // screen height
		int flags = ReadByte();
		ReadByte(); // background color index
		ReadByte(); // pixel aspect ratio
		ReadPalette(flags); // global palette

		int transparentColor = -1;
		for (;;) {
			int b = ReadByte();
			if (b == 0x2c) // Image Descriptor
				break;
			if (b != 0x21) // Extension
				throw ImageFormatException("Invalid block");
			if (ReadByte() == 0xf9) {
				if (ReadByte() != 4)
					throw ImageFormatException("Invalid block");
				flags = ReadByte();
				ReadWord();
				b = ReadByte();
				if ((flags & 1) != 0)
					transparentColor = b;
			}
			for (;;) {
				int length = ReadByte();
				if (length == 0)
					break;
				SkipBytes(length);
			}
		}

		ReadWord();
		ReadWord();
		Width = ReadWord();
		Height = ReadWord();
		if (Width == 0 || Height == 0)
			throw ImageFormatException("Zero size");
		flags = ReadByte();
		Interlace = (flags & 0x40) != 0;
		ReadPalette(flags); // local palette
		int literalBits = ReadByte();
		if (literalBits == 0 || literalBits > 8)
			throw ImageFormatException("Invalid minimum code size");
		if (transparentColor >= 0) {
			// make it transparent, but keep the color
			// just in case someone needs it
			Palette[transparentColor] &= 0xffffff;
		}

		BlockBytes = 0;
		BitBuffer = 0;
		BitBufferBits = 0;
		int pixelsLength = Width * Height;
		Pixels = new byte[pixelsLength];
		int literalCodes = 1 << literalBits;
		int codes = literalCodes + 2;
		int codeBits = literalBits + 1;
		const int maxCodes = 4096;
#if GIF_DICTIONARY
		int[maxCodes] prefixes; // short
		byte[maxCodes] suffixes;
		for (int i = 0; i < literalCodes; i++) {
			prefixes[i] = -1;
			suffixes[i] = i;
		}
		byte pixel = 0;
#else
		int[maxCodes + 1] offsets;
#endif

		for (int pixelsOffset = 0; pixelsOffset < pixelsLength; ) {
			int code = ReadCode(codeBits);
			if (code == literalCodes) {
				// reset
				codes = literalCodes + 2;
				codeBits = literalBits + 1;
				continue;
			}
			if (code == literalCodes + 1)
				throw ImageFormatException("Unexpected EOI code");
			if (code >= codes)
				throw ImageFormatException("Code out of range");

#if GIF_DICTIONARY
			int c = code;
			do {
				pixelsOffset++;
				c = prefixes[c];
			} while (c >= 0);
			if (pixelsOffset > pixelsLength)
				throw ImageFormatException("Too many pixels");

			int destOffset = pixelsOffset;
			c = code;
			do {
				if (c < codes - 1)
					pixel = suffixes[c];
				Pixels[--destOffset] = pixel;
				c = prefixes[c];
			} while (c >= 0);

			if (codes <= maxCodes) {
				suffixes[codes - 1] = pixel;
				if (codes < maxCodes) {
					prefixes[codes] = code;
					if ((codes & codes - 1) == 0)
						codeBits++;
				}
				codes++;
			}
#else
			if (codes <= maxCodes) {
				if (codes < maxCodes && (codes & codes - 1) == 0)
					codeBits++;
				offsets[codes++] = pixelsOffset;
			}
			if (code < literalCodes)
				Pixels[pixelsOffset++] = code;
			else {
				int sourceOffset = offsets[code];
				int endOffset = offsets[code + 1];
				if (pixelsOffset + endOffset - sourceOffset >= pixelsLength)
					throw ImageFormatException("Too many pixels");
				do
					Pixels[pixelsOffset++] = Pixels[sourceOffset++];
				while (sourceOffset <= endOffset);
			}
#endif
		}
	}

	public override int GetPixel(int x, int y)
	{
		if (Interlace) {
			switch (y & 7) {
			case 0: // pass 1
				y >>= 3;
				break;
			case 4: // pass 2
				y = (Height + 7 >> 3) + (y >> 3);
				break;
			case 2: // pass 3
			case 6:
				y = (Height + 3 >> 2) + (y >> 2);
				break;
			default: // pass 4
				y = (Height + 1 >> 1) + (y >> 1);
				break;
			}
		}
		return Palette[Pixels[y * Width + x]];
	}
}
